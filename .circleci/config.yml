version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.0

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # kvdb.io GET URL code goes here
            # Example: kvdb.io
            SUCCESS=$(curl --insecure https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if test $SUCCESS -eq 1
            then
                cd ~/project/backend
                npm install
                npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            sudo npm install webpack-dev-server -g
            cd frontend
            sudo npm i
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm i
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend test
          command: |
              cd frontend
              npm i
              npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command: |
              cd backend
              npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
              cd frontend
              npm audit fix --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
              cd backend
              npm audit fix --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              echo "[web]" >> inventory.txt
              aws ec2 describe-instances \
                --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> inventory.txt
              cat inventory.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ee:a9:61:f0:5b:eb:60:ed:d4:bc:6b:ee:dc:7b:94:68"]
      - run:
          name: Install dependencies
          command: |
           yum install -y tar gzip python3 python3-pip openssh-clients
           pip3 install ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt ./.circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations >> migration_output.txt
            cat migration_output.txt
      - run:
          name: Store migration result in a file.
          command: |
            cd backend
            if grep -q "has been executed successfully." migration_output.txt
            then
              curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: amazon/aws-lambda-nodejs
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
           yum install -y tar gzip python3 python3-pip openssh-clients awscli
           pip3 install ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Upload to S3 bucket
          command: |
            # Clean Origin and Upload all contents of the current directory to the S3 bucket
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-backend:
    docker:
      - image: amazon/aws-lambda-nodejs
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ee:a9:61:f0:5b:eb:60:ed:d4:bc:6b:ee:dc:7b:94:68"]
      - run:
          name: Install dependencies
          command: |
           yum install -y tar gzip python3 python3-pip openssh-clients awscli
           pip3 install ansible
      - attach_workspace:
          at: ~/
      - run:
          name: add ansible config
          command: |
            echo "[ssh_connection]" > ansible.cfg
            echo "scp_if_ssh=True" >> ansible.cfg
      - run:
          name: Deploy backend
          command: |
            # build
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            echo "inventory.txt is:"
            cat inventory.txt
            # Deploy
            ansible-playbook -i inventory.txt -vvv .circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_URL=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_URL}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]